
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
//Classe réalisé par Corentin Bouchaudon
public class DataBase {

	private Connection conn;

	public DataBase() throws ClassNotFoundException, SQLException {
		Class.forName("org.postgresql.Driver");
		conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/cbouch3_a", "cbouch3_a", "cbouch3_a");// remettre
																													// tp-postgres
																													// à
																													// la
																													// fac
	}

	@Override
	protected void finalize() {
		try {
			if (conn != null && conn.isClosed())
				conn.close();
		} catch (Exception e) {
		}
	}

	public Client connection(Client client) throws SQLException {//connecte le client grace a pseudo et mdp
		Statement s = conn.createStatement();
		ResultSet res = s.executeQuery("select idClient, nomClient, prenomClient,email from Client where pseudo ='"
				+ client.getPseudo() + "' and mdp = '" + client.getMdp() + "'");
		res.next();
		client.setEmail(res.getString("email"));
		client.setId(res.getInt("idClient"));
		client.setNom(res.getString("nomClient"));
		client.setPrenon(res.getString("prenomClient"));
		return client;
	}

	public Boolean verifpseudo(String pseudo) throws SQLException {//verifie si pseudo disponible
		Statement s = conn.createStatement();
		ResultSet res = s.executeQuery("select count(idClient) from Client where pseudo ='" + pseudo + "'");
		res.next();
		System.out.println(res.getInt(1));
		if (res.getInt(1) != 0) {
			return false;
		}else {					
			return true;
		}
	}

	public Client inscription(Client client) throws SQLException {//inscrit et connecte le client

		Statement s = conn.createStatement();
		ResultSet res = s.executeQuery("select max(idClient) from Client");
		if(res.next()) {
			client.setId(res.getInt(1)+1);
		}else {
			client.setId(1);
		}
		int resultat = s
				.executeUpdate("insert into Client (idClient,nomClient, prenomClient, pseudo, mdp, email) values ("+
						 client.getId()+","+client.getNom() + "," + client.getPrenon() + "," + client.getPseudo() + "," + client.getMdp()
						+ "," + client.getEmail()+")");
		if (resultat == 1) {
			return client;
		}
		return new Client();
	}

	public List<Video> afficheVideos() throws SQLException {//affiche les films du plus recent au plus ancien (dans la bd)
		List<Video> videos = new ArrayList<>();
		Video video;
		Statement s = conn.createStatement();
		ResultSet res = s.executeQuery(
				"select idVideo,nomVideo,groupeVideo,numEpisode,nbVue,prixAchat,prixLocation from Video order by idVideo DESC");

		while (res.next()) {
			video = new Video(res.getInt("idVideo"), res.getString("nomVideo"), res.getString("groupeVideo"),
					res.getInt("numEpisode"), res.getInt("nbvue"), res.getDouble("prixAchat"),
					res.getDouble("prixLocation"));
			videos.add(video);
		}

		return videos;
	}

	public List<Video> suggestions(Video v) throws SQLException {////////////a modifier pour plus de sugg
		List<Video> videos = new ArrayList();
		Statement s = conn.createStatement();
		ResultSet res = s.executeQuery(
				"select idVideo,nomVideo,groupeVideo,numEpisode,nbVue,prixAchat,prixLocation from Video where nomVideo ='"
						+ v.getNomVideo() + "', and groupVideo = '" + v.getGroupeVideo() + "', and numEpisode > "
						+ v.getnumepisode());
		Video video;

		while (res.next()) {
			video = new Video(res.getInt("idVideo"), res.getString("nomVideo"), res.getString("groupeVideo"),
					res.getInt("numEpisode"), res.getInt("nbvue"), res.getDouble("prixAchat"),
					res.getDouble("prixLocation"));
			videos.add(video);
		}
		res = s.executeQuery(
				"select idVideo,nomVideo,groupeVideo,numEpisode,nbVue,prixAchat,prixLocation from Video where nomVideo ='"
						+ v.getNomVideo() + "', and groupVideo = '" + v.getGroupeVideo() + "', and numEpisode > "
						+ v.getnumepisode());
		while (res.next()) {
			video = new Video(res.getInt("idVideo"), res.getString("nomVideo"), res.getString("groupeVideo"),
					res.getInt("numEpisode"), res.getInt("nbvue"), res.getDouble("prixAchat"),
					res.getDouble("prixLocation"));
			videos.add(video);
		}

		return videos;
	}

	public Video recupDernierID() throws SQLException {//recupere l'id de la derniere video
		String query = "SELECT max(idVideo) as idmax FROM Video";
		Statement s = conn.createStatement();
		ResultSet res = s.executeQuery(query);
		res.next();
		Video v = new Video();
		v.setId(res.getInt("idmax"));
		return v;
	}

	public List<Video> rechercheVideo(List<MotClef> mc) throws SQLException {//retourne les videos qui correspondent aux mots clefs
		List<Video> videos = new ArrayList();
		List<Video> videosreturn = new ArrayList();
		String query = "select  idVideo,nomVideo,groupeVideo,numEpisode,resume,nbVue,prixAchat,prixLocation from Video where idVideo in (select idVideo from MotClefVideo where idMotClef =";
		Statement s = conn.createStatement();
		ResultSet res;
		Video video;
		res = s.executeQuery(query + mc.get(0).getId() + ")");
		for (int i = 0; i < mc.size(); i++) {
			res = s.executeQuery(query + mc.get(i).getId() + ")");
			while (res.next()) {
				video = new Video(res.getInt("idVideo"), res.getString("nomVideo"), res.getString("groupeVideo"),
						res.getInt("numEpisode"),res.getresume("resume"), res.getInt("nbvue"), res.getDouble("prixAchat"),
						res.getDouble("prixLocation"));				
				videos.add(video);
			}
		}
		for (int i = 0; i < videos.size(); i++) {
			int cpt=0;
			for (int j = i; j<videos.size();j++) {
				if(videos.get(i).getId()==videos.get(j).getId()) {
					cpt++;
				}
			}
			
			if (cpt==mc.size()) {
				videosreturn.add(videos.get(i));
			}
		}
		return videosreturn;
	}

	public List<MotClef> listMotClef() throws SQLException {//retourne les mots clef
		String query = "select * from MotClef";
		Statement s = conn.createStatement();
		ResultSet res = s.executeQuery(query);
		List<MotClef> motclefs = new ArrayList();
		MotClef mc;
		while (res.next()) {
			mc = new MotClef(res.getInt(1), res.getString(2));
			motclefs.add(mc);
		}
		return motclefs;
	}

	public Video incrementevue(Video v) throws SQLException {//increment les vues sur la video
		String query = "Update Video Set nbvue = nbvue+1 where idVideo =" + v.getId();
		Statement s = conn.createStatement();
		int res =s.executeUpdate(query);
		if (res==1) {
			v.setNbvue(v.getNbvue()+1);
		}		
		return v;
		
	}

	public void BecomePremium(Client client) throws SQLException, ClassNotFoundException {//transforme un inscrit en premium
		try {
			String query = "UPDATE CompoClient SET idCategorieClient = 2 WHERE idClient =" + client.getId();
			Statement s = conn.createStatement();
			s.executeUpdate(query);
		} catch (Exception e) {
		}
	}

	public static void main(String[] argv) throws ClassNotFoundException, SQLException {
		DataBase db = new DataBase();
		Video v = new Video (1,"La Menace Fantome","Star Wars",1,"Avant de devenir un célèbre chevalier Jedi, et bien avant de se révéler l âme la plus noire de la galaxie, Anakin Skywalker est un jeune esclave sur la planète Tatooine. La Force est déjà puissante en lui et il est un remarquable pilote de Podracer. Le maître Jedi Qui-Gon Jinn le découvre et entrevoit alors son immense potentiel.Pendant ce temps, l armée de droïdes de l insatiable Fédération du Commerce a envahi Naboo, une planète pacifique, dans le cadre d n plan secret des Sith visant à accroître leur pouvoir. Pour défendre la reine de Naboo, Amidala, les chevaliers Jedi vont devoir affronter le redoutable Seigneur Sith, Dark Maul.",666, 3.99,5.99);
	}
}
